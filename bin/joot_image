#!/usr/bin/perl

use strict;
use warnings;

use Joot::Util qw( mkpath bin run sudo );
use Joot::Plugin::QCOW qw( nbd_connect nbd_disconnect is_disk_connected );
use Getopt::Long ();
use File::Spec ();
use Log::Log4perl qw(:easy);
Log::Log4perl->easy_init($DEBUG);

sudo( $0, \@ARGV );
my %options;
Getopt::Long::GetOptions( \%options, qw(create mount umount|unmount size) );

my $image = shift or die usage("missing image\n") . "\n";
if ( $options{mount} ) {
    my $mnt = shift or die usage("missing mount point\n") . "\n";
    mkpath($mnt);
    my $device = nbd_connect($image);
    run( bin("mount"), $device, $mnt );
}
elsif ( $options{umount} ) {
    if ( my $device = is_disk_connected($image) ) {
        run( bin("umount"), $device );
        nbd_disconnect($device);
    }
    else {
        die "$image isn't mounted\n";
    }
}
elsif ( $options{create} ) {
    my $size = shift || "10G";

    my $image_dir = ( File::Spec->splitpath( $image ) )[1];
    mkpath( $image_dir );
    run( bin("qemu-img"), qw( create -f qcow2 ), $image, $size );
    my $device = nbd_connect($image);
    run( bin("mkfs.ext2"), qw( -b 4096 ), $device );
    nbd_disconnect($device);
} else { 
    die usage("missing command\n") . "\n";
}

sub usage {
    my $mesg = shift || "\n";
    return <<"EOF"
${mesg}Usage:
    $0 --create <image file> [--size <size>]
    $0 --mount <file> <mount point>
    $0 --umount <file>
EOF
}

__END__

=head1 NAME

joot_image - Utility to build images for joot

=head1 SYNOPSIS

    Usage:
        joot_image --create <image file> [--size <size>]
        joot_image --mount <file> <mount point>
        joot_image --umount <file>
