#!/usr/bin/perl 

use strict;
use warnings;

use English '-no_match_vars';
use Joot ();
use Joot::Util qw(bin sudo);
use Getopt::Long ();
use Log::Log4perl ':easy';

my $VERSION = "0.0.1";

my $orig_argv = [@ARGV];

Getopt::Long::Configure(qw(auto_abbrev pass_through));

# collect global variables
my $verbose = 0;
Getopt::Long::GetOptions(
    "version" => sub { print "$0 version $VERSION\n"; exit; },
    "verbose|v" => \$verbose,
    "help|h|?"  => sub { print usage(); exit(0); },
) or die usage() . "\n";

my $level = $verbose ? "DEBUG" : "INFO";
my $conf = <<"EOC";
    log4perl.rootLogger             = $level, Screen
    log4perl.appender.Screen        = Log::Log4perl::Appender::Screen
    log4perl.appender.Screen.layout = Log::Log4perl::Layout::SimpleLayout
EOC
Log::Log4perl::init( \$conf );

my $action = get_action();

# get options for action
Getopt::Long::Configure('no_pass_through');
my %options;
Getopt::Long::GetOptions( \%options, action_opt_spec($action) ) or die usage() . "\n";

# images and list command don't require root privileges
if ( $action ne "images" && $action ne "list" ) {

    # we need to force a --user here, because we'll loose what the original
    # $REAL_USER_ID was when we sudo
    if ( $action eq "chroot" && !$options{user} ) {
        push @{$orig_argv}, "--user", scalar( getpwuid($REAL_USER_ID) );
    }

    sudo( $0, $orig_argv );
}

my $ret;
eval {
    if ( $action eq "delete" )
    {
        if ( !@ARGV ) {
            die "Missing joot to remove\n";
        }
        foreach my $name (@ARGV) {
            Joot->new($name)->delete();
        }
    }
    else {
        my $joot = Joot->new( shift @ARGV );
        if ( keys %options ) {
            $ret = $joot->$action( @ARGV, \%options );
        }
        else {
            $ret = $joot->$action(@ARGV);
        }
    }
    1;
} or do {
    FATAL $EVAL_ERROR if $EVAL_ERROR !~ /\A\s+\z/x;
    FATAL "$0 version $VERSION";
    die usage() . "\n";
};

# format the responses for list and images actions
if ( $action eq "list" ) {

    foreach my $name ( sort keys %$ret ) {
        my $joot        = $ret->{$name};
        my $image_name  = Joot::Image->new( $joot->{image}->{url} )->name();
        my $create_date = localtime( $joot->{ctime} );

        # bar jaybuff 1287188379 debian-5.0-i386-20101008
        my $len = max_len( keys %$ret );
        printf( "%${len}s %s [%s] %s\n", $name, $joot->{creator}, $create_date, $image_name );
    }
}
elsif ( $action eq "images" ) {
    foreach my $name ( sort keys %$ret ) {
        my $image = $ret->{$name};
        my $len   = max_len( keys %$ret );
        printf( "%${len}s%s %s\n", $name, $image->cached() ? "*" : " ", $image->url() );
    }
}

sub max_len {    ## no critic qw(Subroutines::RequireArgUnpacking)
    my $len = 0;    # length of the longest string
    foreach (@_) {
        my $l = length($_) + 2;
        $len = $l if $l > $len;
    }
    return $len;
}

sub get_action {

    # action must be exactly one of these
    my %action;
    Getopt::Long::GetOptions( \%action, qw(create images list delete|remove rename mount umount|unmount) ) or die usage() . "\n";

    if ( keys %action == 0 ) {
        $action{chroot} = 1;
        if ( !@ARGV ) {
            die usage("missing action") . "\n";
        }
    }
    elsif ( keys %action != 1 ) {
        die usage( "You can't use commands \"" . join( " ", keys %action ) . "\" at the same time" ) . "\n";
    }

    return ( keys %action )[0];
}

sub action_opt_spec {
    my $act = shift;
    if ( $act eq "chroot" ) {
        return ( "user=s", "cmd=s", "no-home", "ro-home" );
    }
    elsif ( $act eq "mount" ) {
        return ( "always", "read-only", );
    }

    return;
}

sub usage {    ## no critic qw(Subroutines::RequireArgUnpacking)
    my $message = join( "\n", @_ );
    $message .= "\n" if $message;
    return <<"EOM";
${message}Usage: 
    $0 <joot name> [--user <user>] [--cmd <cmd>] [--no-home] [--ro-home]
    $0 --create <name> <image>
    $0 --images 
    $0 --list 
    $0 --remove <name> [<name> ...]
    $0 --rename <old name> <new name>
    $0 --mount <name> [--read-only] [--always] [<dir> ...]
    $0 --umount <name> [<dir> ...] 

Global options:
    --verbose 
    --version
    --help
EOM
}

__END__

=head1 NAME

joot - utility to manage disk images and chroots to provide you with quick clean room environments

=head1 SYNOPSIS

    Usage: 
        joot <joot name> [--user <user>] [--cmd <cmd>] [--no-home] [--ro-home]
        joot --create <name> <image>
        joot --images 
        joot --list 
        joot --remove <name> [<name> ...]
        joot --rename <old name> <new name>
        joot --mount <name> [--read-only] [--always] [<dir> ...]
        joot --umount <name> [<dir> ...] 

    Global options:
        --verbose 
        --version
        --help
